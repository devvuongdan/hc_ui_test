name: hcm_ui_test
description: A new Flutter project.

# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: "none" # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: ">=2.18.6 <3.0.0"

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter
  flutter_localizations:
    sdk: flutter

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.2

  # For architecture
  flutter_modular: ^5.0.3 # Smart project structure with dependency injection and route management
  flutter_bloc: ^8.0.1 # Flutter Widgets that make it easy to implement the BLoC (Business Logic Component) design pattern. Built to be used with the bloc state management package.

  # For local storage
  path_provider: ^2.0.11 # Flutter plugin for getting commonly used locations on host platform file systems, such as the temp and app data directories.
  hive: ^2.1.0 # Lightweight and blazing fast key-value database written in pure Dart. Strongly encrypted using AES-256.

  # For multiple languages
  intl: ^0.17.0 # Contains code to deal with internationalized/localized messages, date and number formatting and parsing, bi-directional text, and other internationalization issues.
  multiple_localization: ^0.3.0 # Support for multiple abr and messages localization files for intl package.

  # For sizer
  # universal_io: ^2.0.4

  # For networking
  # dio: ^4.0.1 # A powerful Http client for Dart, which supports Interceptors, FormData, Request Cancellation, File Downloading, Timeout etc.
  # retrofit: ^3.0.1+1 # retrofit.dart is an dio client generator using source_gen and inspired by Chopper and Retrofit.

  # For model
  # equatable: ^2.0.3 # A Dart package that helps to implement value based equality without needing to explicitly override == and hashCode.
  # json_annotation: ^4.5.0 # Classes and helper functions that support JSON code generation via the `json_serializable` package.
  # freezed_annotation: ^2.1.0 # Annotations for the freezed code-generator. This package does nothing without freezed too.

  # For UIs
  flutter_svg: ^1.1.3 # An SVG rendering and widget library for Flutter, which allows painting and displaying Scalable Vector Graphics 1.1 files.

  # Small, easy to use and extensible logger which prints beautiful logs.
  logger: ^1.2.2

  # # Just use this package for simple studycase
  # restart_app: ^1.1.1
  # flutter_phoenix: ^1.1.0

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^2.0.0

  # For generate files
  build_runner: ^2.2.0 # A build system for Dart code generation and modular compilation.
  freezed: ^2.1.0+1 # Code generation for immutable classes that has a simple syntax/API without compromising on the features.

  # For generate assets
  flutter_gen_runner: ^4.3.0 # The Flutter code generator for your assets, fonts, colors, … — Get rid of all String-based APIs.

  # For generate networking
  # retrofit_generator: ^4.0.3+1 # Retrofit generator is an dio client generator using source_gen and inspired by Chopper and Retrofit.
  # json_serializable: ^6.3.1 # Automatically generate code for converting to and from JSON by annotating Dart classes.

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter_gen:
  integrations:
    flutter_svg: true
    flare_flutter: true
    rive: true
    lottie: true

flutter:
  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  assets:
    - assets/mocks/images/
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
